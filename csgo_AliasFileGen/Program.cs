using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Text.RegularExpressions;

namespace csgo_AliasFileGen
{
    class Program
    {
        static void Main(string[] args)
        {
            if (args.Length != 0) PrintHelp();
            try
            {
                string outFile;
                var cfgFiles = GetConfigFilePaths(out outFile);

                var aliasLines = GetAliasLines(cfgFiles);
                
                var aliases = new List<CsgoAlias>();
                foreach (var line in aliasLines) aliases.Add(new CsgoAlias(line));
                
                var cmd = FormatAlisesToCommand(aliases);
                WriteFinalConfig(cmd, outFile);
            }
            catch (Exception e)
            {
                PrintError(e);
            }
        }

        static List<string> GetConfigFilePaths(out string outFile)
        {
            if (ConfigurationManager.AppSettings["outputFile"] == "")
                throw new ConfigurationErrorsException("The Output File can't be empty!");

            outFile = ConfigurationManager.AppSettings["outputFile"];

            var cfgFiles = new List<string>();
            var ignoredFiles = new List<string>();
            // Read all single file paths supplied
            if (ConfigurationManager.AppSettings["configFiles"] != "")    
                foreach (var cfg in ConfigurationManager.AppSettings["configFiles"].Split(','))
                    cfgFiles.Add(cfg);

            // Read all directories supplied, add each file in each directory
            if (ConfigurationManager.AppSettings["configDirectories"] != "")
                foreach (var cfg in ConfigurationManager.AppSettings["configDirectories"].Split(','))
                    foreach (var file in Directory.GetFiles(cfg))
                        cfgFiles.Add(file);

            // Read all files to ignore and remove them from the config file list
            if (ConfigurationManager.AppSettings["ignoredFiles"] != "")
                foreach (var cfg in ConfigurationManager.AppSettings["ignoredFiles"].Split(','))
                    ignoredFiles.Add(cfg);

            foreach (var file in ignoredFiles)
                if (cfgFiles.Contains(file)) cfgFiles.Remove(file);

            return cfgFiles;
        }

        static List<string> GetAliasLines(List<string> cfgFiles)
        {
            var aliasList = new List<string>();

            // Check each Line in each File for lines matching the pattern.
            foreach (var cfgFile in cfgFiles)
            {
                using (var fileReader = new StreamReader(cfgFile))
                {
                    string cfgLine;
                    // As long as next line is not empty, check wether it matches the pattern,
                    // and if it does so, add it to the list
                    while ((cfgLine = fileReader.ReadLine()) != null)
                    {
                        if (Regex.IsMatch(cfgLine, CsgoAlias.AliasRegexPattern, RegexOptions.IgnoreCase))
                            aliasList.Add(cfgLine);
                    }
                }
            }
            return aliasList;
        }

        static string FormatAlisesToCommand(List<CsgoAlias> aliases)
        {
            var cmd =
                "// Autogenerated list of aliases from all config Files" + Environment.NewLine +
                "// All changes will be undone!" + Environment.NewLine +
                "clear\n" +
                "echo \"--------------------------------------\"" + Environment.NewLine +
                "echo \"| ALIASLIST | Count: " + aliases.Count + "\"" + Environment.NewLine +
                "echo \"--------------------------------------\"" + Environment.NewLine;

            foreach (var a in aliases)
            {
                cmd += "echo ==>  " + a.AliasName;
                if (a.AliasComment != "") cmd += " --- ";
                cmd += a.AliasComment + Environment.NewLine;
            }
            
            cmd += "echo \"--------------------------------------\"\n";
            return cmd;
        }

        static void WriteFinalConfig(string cmd, string configPath)
        {
            if (!File.Exists(configPath)) File.Create(configPath);
            File.WriteAllText(configPath, cmd);
        }

        static void PrintHelp()
        {
            Console.Write("This Application does not accept command line parameters!");
            Console.ReadLine();
            Environment.ExitCode = 1;  // "Incorrect Function"
        }

        static void PrintError(Exception e)
        {
            Console.WriteLine("-----------------------");
            Console.WriteLine("An unexpected error occured:");
            Console.WriteLine(e.Message);
            if (e.InnerException != null)
            {
                Console.WriteLine("-----------------------");
                Console.WriteLine("Detailed error:");
                Console.WriteLine(e.InnerException);
            }
            Console.WriteLine("-----------------------");
            Console.WriteLine("Press Enter to continue...");
            Console.ReadLine();
            Environment.ExitCode = 1; // "Incorrect Function"
        }
    }
}
